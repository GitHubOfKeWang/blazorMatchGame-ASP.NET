@page "/"

<style>
    .container {
        width:400px;
    }

    button {
        width:100px;
        height:100px;
        font-size:50px;
    }
</style>

<div class="container">
    <div class="row">
        @for (var animalNumber = 0; animalNumber < animalEmoji.Count; animalNumber++)
{
                var animal = shuffleAnimals[animalNumber];
                var animalIndex = animalNumber;
                <div class="col-3">
                    <button type="button" class="btn btn-outline-dark" @onclick="@(() => ButtonClick(animal, animalIndex))">
                        <h1>@animal</h1>
                    </button>
                </div>
}
    </div>
 </div>


@code {
    List<string> animalEmoji = new List<string>()
    {
        "🐶","🐶",
        "🐱","🐱",
        "🐯","🐯",
        "🐲","🐲",
        "🐼","🐼",
        "🐨","🐨",
        "🐧","🐧",
        "🐰","🐰"
    };

    List<string> shuffleAnimals = new List<string>();

    protected override void OnInitialized()
    {
        SetUpGame();
    }

    private void SetUpGame() {
        Random random = new Random();
        shuffleAnimals = animalEmoji.
                            OrderBy(item => random.Next()).
                            ToList();
    }

    string lastAnimalFound = string.Empty;
    int lastAnimalIndex = -1;
    int matchedAnimalNumber = 0;

    private void ButtonClick(string animal, int uniqueIdx) {
        if (lastAnimalFound == string.Empty)
        {
            lastAnimalFound = animal;
            lastAnimalIndex = uniqueIdx;
            return;
        } else if (lastAnimalFound == animal)
        {
            if (lastAnimalIndex == uniqueIdx)
            {
                //when click the same button multiple times, keep the lastAnimalFound and lastAnimalIndex unchanged
                return;
            }
            //replace the matched animals with empty string to hide them
            shuffleAnimals = shuffleAnimals.Select(a => a.Replace(animal, string.Empty)).ToList();

            //the two different block matched, then the matchedAnimalNumber increase by 2
            matchedAnimalNumber += 2;

            //when all animal button macthed in the board, reset the board
            if (matchedAnimalNumber == animalEmoji.Count)
            {
                Random random = new Random();
                shuffleAnimals = animalEmoji.OrderBy(item => random.Next()).ToList();
            }

            //initialize the last animal related data
            lastAnimalFound = string.Empty;
            lastAnimalIndex = -1;
        } else
        {
            //update the last-animal data as chosed a different animal this time
            lastAnimalFound = animal;
            lastAnimalIndex = uniqueIdx;
        }


    }
}